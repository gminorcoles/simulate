#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:auto timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t
#+TITLES: README
#+DATE: <2017-06-21 Wed>
#+AUTHORS: weiwu
#+EMAIL: victor.wuv@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 8.3.4)
* Mean Variance optimization
[[./images/markowitz.png]]
** 示例：

** 输入参数：
#+BEGIN_SRC parameter
    target_mode: int
        target optimization type
        0: minimum risk.
        1: minimum risk subject to target return.
        2: maximum sharpe ratio subject to target risk.
        3: loss function.

    position_limit: int
        maximum position number selected.

    cov_matrix: OOTV
        covariance matrix from risk model if holdings are stocks.
        factor_exposure_matrix.dot(covariance_matrix).dot(factor_exposure_matrix.T)

    specific_risk: OTV
        O: stocks symbol. None for funds.

    asset_return: Dataframe, OTV,
        forecasted asset return for all symbols.
        index=date, O: asset names, V: asset return.

    asset_weight: Dataframe, OOTV
        T=date, O: asset names, O: group names, V: asset weight.
        weight bound of each asset. Default is equal weight.

    target_return: double
        Target return for portfolio respected to benchmark.

    target_risk: double
        Portfolio risk tolerance whose objective is maximum return.

    start_date: Timestamp
        start date for multiperiod optimization.

    end_date: Timestamp
        end date for multiperiod optimization, should be in range of asset return and asset weight date.

    asset_constraint: OVV
        input asset constraint, V1: lower boundary, V2: upper boundary.

    group constraint: OVV
        input group constraint, V1: lower boundary, V2: upper boundary.

    exposure constraint: OVV
        input factor exposure constraint, V1: lower boundary, V2: upper boundary.

    alpha_return: double
        coefficient number to adjust target return.
        target_return = target_return * alpha_return

    lambda_risk: double
        coefficient number to adjust target risk
        target_risk = target_risk * lambda_risk

    beta_tranaction: double
        multi-period transaction cost adjustment number.


    Returns:
    ----------
    df_result: DataFrame
        Optimized value of weight.
        Index: target date.
        Columns: assets names.
#+END_SRC
** 最小化风险：
输入设置：

输出结果：

**** 在满足输入回报下，最小化风险；
请手动更改设置模式。

**** 在满足输入风险下，最大化收益。
J GID：
0AB023977FD09C6BE8196C351D41A098
模式3计算时间大概需要10分钟。

**** 根据active portfolio management与axioma做出类似产品效果， 修改constraint条件。
** 功能：
*** 3种模式：
Portfolios are points from a feasible set of assets that constitute an asset universe. A portfolio specifies either holdings or weights in each individual asset in the asset universe. The convention is to specify portfolios in terms of weights, although the portfolio optimization tools work with holdings as well.
The set of feasible portfolios is necessarily a nonempty, closed, and bounded set. The proxy for risk is a function that characterizes either the variability or losses associated with portfolio choices. The proxy for return is a function that characterizes either the gross or net benefits associated with portfolio choices. The terms "risk" and "risk proxy" and "return" and "return proxy" are interchangeable. The fundamental insight of Markowitz (see Portfolio Optimization) is that the goal of the portfolio choice problem is to seek minimum risk for a given level of return and to seek maximum return for a given level of risk. Portfolios satisfying these criteria are efficient portfolios and the graph of the risks and returns of these portfolios forms a curve called the efficient frontier.
**** subject to loss function.
f(\alpha, \lambda , \beta) = -\alpha ret + \lambda \sigma + \beta transaction_cost
**** 最小化风险；
**** 在满足输入回报下，最小化风险；
**** 在满足输入风险下，最大化收益。
***** Second Order Cone Programming with CVXOPT
CVXOPT is a convex optimization package for Python that includes a Second Order Cone Programming (SOCP) solver.  The SOCP solver takes a set of matrices that describe the SOCP problem, but these matrices are different than the matrices usually used to express the SOCP problem.  This post walks through the simple algebra steps to find relationship between the two formulations of the SOCP problem.

The SOCP problem as described in Wikipedia or the excellent free book Convex Optimization by Boyd and Vandenberghe includes the constraint:
$\| A x + b \|_2 \leq c^T x + d$

We can rewrite this to be:

\begin{bmatrix} c^T \\ A \end{bmatrix} + \begin{bmatrix} d \\ b \end{bmatrix} = \begin{bmatrix} s_0 \\ s_1 \end{bmatrix}, \qquad s_0 \geq \| s_1 \|_2

Now to rearrange into the format expected by the CVXOPT solver:

- \begin{bmatrix} c^T \\ A \end{bmatrix} + \begin{bmatrix} s_0 \\ s_1 \end{bmatrix} = \begin{bmatrix} d \\ b \end{bmatrix}

And then see the relationship between the two formulations of the SOCP problem are equivalent:

G= \begin{bmatrix} -c^T \\ -A \end{bmatrix} and h = \begin{bmatrix}d \\ b \end{bmatrix}

*** Portfolio Problem Specification
To specify a portfolio optimization problem, you need the following:

- Proxy for portfolio return (μ)
- Proxy for portfolio risk (Σ)
- Set of feasible portfolios (X), called a portfolio set

*** 多种限制条件：
- 个股数量限制；
- 个股权重限制；
- 行业权重限制；
- 风格因子暴露限制。
当未输入限制条件时，默认权重限制为（0，1），默认风格因子暴露为RISK MODEL计算得到的值上下浮动0.000009。

*** 不同的警告提示：
当输入的限制条件无法使得系统得出目标最优解时，会提示原因，找到何种限制条件无法满足。
