#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:auto timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t
#+TITLES: README
#+DATE: <2017-06-21 Wed>
#+AUTHORS: weiwu
#+EMAIL: victor.wuv@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 8.3.4)

Simulate is a python library for risk modeling, find alpha, portfolio optimization and simulation. It is written in Python, its major dependencies are cvxpy and pandas.

The simulator is a package for simulating and optimizing multi-period investment, it is able to simulate the evolution of a portfolio, taking into account asset returns, transaction costs, and holding costs. The package includes simple but reasonable models of transaction cost based on asset bid-ask spread, volume, and volatility.

I consider a basic model of multi-period trading, which can be used to evaluate the performance of a trading strategy. We describe a framework for single-period optimization, where the trades in each period are found by solving a convex optimization problem that trades off expected return, risk, transaction costs.

Simulate provides functionality for implementing trading strategies using the convex optimization package CVXPY.

The package relies on Pandas for data handling (e.g., prices, returns, volumes). Our simple examples show how Quandl can be used to import open source financial data, but any other source can be used instead.

See the examples for basic usage.

* Installation
1. Install Anaconda

2. Install required packages
#+BEGIN_SRC bash
pip install -r requirements.txt
#+END_SRC

3. Install cvxpy (if it doesn't work, use pip install)
#+BEGIN_SRC bash
conda install -c conda-forge lapack
conda install -c cvxgrp cvxpy
#+END_SRC

4. Test the installation with nose
#+BEGIN_SRC bash
conda install nose
nosetests simulate
#+END_SRC

5. add build-in packages into Python path.
#+BEGIN_SRC bash
export PYTHONPATH=./lib/:$PYTHONPATH
#+END_SRC

* Risk Model:
[[file:./risk_model/readme.org][Risk Modeling]]

[[./risk_model/images/input_workflow.png]]

Risk model is a multi-factor model using linear regression to measure the overall risk associated with a security relative to the market.

It is used for multiple ways, e.g. portfolio optimization, portfolio return &risk contribution.

* factor model
[[file:./factor/readme.org][Factor Model]]
To find alpha by a factor.
1. Select stocks by quantile using a factor screener.
2. Generate a portfolio with equally weighted stocks.

* optimization:
There are three optimization strategies provided in the library, mvo, black litterman and risk parity.

The fundamental introduction of these optimization methods and how-to run instruction are listed under below.
- [[file:./optimization/mean_variance/readme.org][Mean Variance Optimization]]
- [[file:./optimization/black_litterman/readme.org][Black Litterman]]
- [[file:./optimization/risk_parity/readme.org][Risk Parity]]

* simulation/backtest
Backtest a portfolio with data like price, volume, stock portfolio weight, trading cost, dividend, splits, etc.

* strategy
