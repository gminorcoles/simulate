#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:auto timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t
#+TITLES: README
#+DATE: <2017-06-21 Wed>
#+AUTHORS: weiwu
#+EMAIL: victor.wuv@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 8.3.4)

Simulate is a package for simulating and optimizing multi-period investment.

Simulate is a python library for portfolio optimization and simulation. It is written in Python, its major dependencies are cvxpy and pandas.

The simulator is able to simulate the evolution of a portfolio, taking into account asset returns, transaction costs, and holding costs. The package includes simple but reasonable models of transaction cost based on asset bid-ask spread, volume, and volatility.

I consider a basic model of multi-period trading, which can be used to evaluate the performance of a trading strategy. We describe a framework for single-period optimization, where the trades in each period are found by solving a convex optimization problem that trades off expected return, risk, transaction costs.

# todo
# holding costs such as the borrowing cost for shorting assets.

Simulate provides functionality for implementing trading strategies using the convex optimization package CVXPY.

The package relies on Pandas for data handling (e.g., prices, returns, volumes). Our simple examples show how Quandl can be used to import open source financial data, but any other source can be used instead.

See the examples for basic usage.

* Install Anaconda
1. Install pandas
#+BEGIN_SRC bash
conda install pandas
#+END_SRC
2. Install cvxpy (if it doesn't work, follow instructions here)
#+BEGIN_SRC bash
conda install -c conda-forge lapack
conda install -c cvxgrp cvxpy
#+END_SRC

3. Test the installation with nose
#+BEGIN_SRC bash
conda install nose
nosetests simulate
#+END_SRC

* optimization:
- [[file:./optimization/mean_variance/readme.org][Mean Variance Optimization]]
- [[file:./optimization/black_litterman/readme.org][Black Litterman]]
- [[file:./optimization/risk_parity/readme.org][Risk Parity]]
* simulation/backtest
* factor tests
* strategy

** monitor global etf performance
*** TODO fetch global etf data
- [ ] use threading to do multi-task. Fully understanding threading.
*** use PCA to get most dominant stocks.
* Graphic Strategist
** FS 拓扑
- Function Define, Function Define + Parameters -> Function Instance.
把FD绑定参数之后生成FI.
- Function Define -> Function Sampling.
FS由FD搭建。
- Function Sampling Define, Function Sampling Instance.
也可以通过把FSD绑定参数，产生FSI。
- Function Queue, Function Queue Instance.
当FS跑出大量FSI之后，需要设置筛选条件来取出符合要求的FSI，这个时候需要设定FQ，同时通过FQI来取目标FSI。

** 单因子流程

** 文档

** 股票因子
** 股票策略
** 函数采样
** 函数定义
