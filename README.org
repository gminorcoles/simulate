#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t
#+TITLES: README
#+DATE: <2017-06-21 Wed>
#+AUTHORS: weiwu
#+EMAIL: victor.wuv@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 8.3.4)


* utilities

** export file
#+BEGIN_SRC shell
!cp /home/gft/data/x0.pkl ~/work/

#+END_SRC

* 功能：
** 3种模式：
*** 最小化风险；
*** 在满足输入回报下，最小化风险；
*** 在满足输入风险下，最大化收益。
Portfolios are points from a feasible set of assets that constitute an asset universe. A portfolio specifies either holdings or weights in each individual asset in the asset universe. The convention is to specify portfolios in terms of weights, although the portfolio optimization tools work with holdings as well.
The set of feasible portfolios is necessarily a nonempty, closed, and bounded set. The proxy for risk is a function that characterizes either the variability or losses associated with portfolio choices. The proxy for return is a function that characterizes either the gross or net benefits associated with portfolio choices. The terms "risk" and "risk proxy" and "return" and "return proxy" are interchangeable. The fundamental insight of Markowitz (see Portfolio Optimization) is that the goal of the portfolio choice problem is to seek minimum risk for a given level of return and to seek maximum return for a given level of risk. Portfolios satisfying these criteria are efficient portfolios and the graph of the risks and returns of these portfolios forms a curve called the efficient frontier.
**** Second Order Cone Programming with CVXOPT
CVXOPT is a convex optimization package for Python that includes a Second Order Cone Programming (SOCP) solver.  The SOCP solver takes a set of matrices that describe the SOCP problem, but these matrices are different than the matrices usually used to express the SOCP problem.  This post walks through the simple algebra steps to find relationship between the two formulations of the SOCP problem.

The SOCP problem as described in Wikipedia or the excellent free book Convex Optimization by Boyd and Vandenberghe includes the constraint:
$$
\| A x + b \|_2 \leq c^T x + d $$

We can rewrite this to be:

$$ \begin{bmatrix} c^T \\ A \end{bmatrix} + \begin{bmatrix} d \\ b \end{bmatrix} = \begin{bmatrix} s_0 \\ s_1 \end{bmatrix}, \qquad s_0 \geq \| s_1 \|_2 $$

Now to rearrange into the format expected by the CVXOPT solver:

$$ - \begin{bmatrix} c^T \\ A \end{bmatrix} + \begin{bmatrix} s_0 \\ s_1 \end{bmatrix} = \begin{bmatrix} d \\ b \end{bmatrix} $$

And then see the relationship between the two formulations of the SOCP problem are equivalent:

$$ G= \begin{bmatrix} -c^T \\ -A \end{bmatrix} and h = \begin{bmatrix}d \\ b \end{bmatrix} $$

** Portfolio Problem Specification
To specify a portfolio optimization problem, you need the following:

- Proxy for portfolio return (μ)
- Proxy for portfolio risk (Σ)
- Set of feasible portfolios (X), called a portfolio set

** 多种限制条件：
- 个股数量限制；
- 个股权重限制；
- 行业权重限制；
- 风格因子暴露限制。
当未输入限制条件时，默认权重限制为（0，1），默认风格因子暴露为RISK MODEL计算得到的值上下浮动0.000009。

** 不同的警告提示：
当输入的限制条件无法使得系统得出目标最优解时，会提示原因，找到何种限制条件无法满足。

* 输入参数：
#+BEGIN_SRC parameter
    target_mode: int
        target optimization type
        0: minimum risk.
        1: minimum risk subject to target return.
        2: maximum sharpe ratio subject to target risk.

    position_limit: int
        maximum position number selected.

    risk model: dictionary
        Risk factor exposure: DataFrame
            所有股票在因子上暴露的值，p.s. 如有8个因子，就有8个DataFrame,
            得把所有8个因子某一天所有值先取出来得到一个n*k的矩阵.n为股票，k为因子
        Specific Risk: DataFrame
            用来组成对角矩阵Delta.

    asset_return: Dataframe, OTV,
        asset return for all symbols.
        index=date, O: asset names, V: asset return.

    asset_weight: Dataframe, OOTV
        T=date, O: asset names, O: group names, V: asset weight.
        weight bound of each asset. Default is equal weight.

    target_return: double
        Target return for portfolio respected to benchmark.

    target_risk: double
        Portfolio risk tolerance whose objective is maximum return.

    target_date: Timestamp
        Specific date.

    asset_constraint: OVV
        input asset constraint, V1: lower boundary, V2: upper boundary.

    group constraint: OVV
        input group constraint, V1: lower boundary, V2: upper boundary.

    exposure constraint: OVV
        input factor exposure constraint, V1: lower boundary, V2: upper boundary.

    alpha_return: double
        coefficient number to adjust target return.
        target_return = target_return * alpha_return

    lambda_risk: double
        coefficient number to adjust target risk
        target_risk = target_risk * lambda_risk

    beta_tranaction: double
        multi-period transaction cost adjustment number.


    Returns:
    ----------
    df_result: DataFrame
        Optimized value of weight.
        Index: target date.
        Columns: assets names.
#+END_SRC
* 示例：
** 最小化风险：
J GID：
A42325FC45B9D55C7C05056721AE3A88
输入设置：

输出结果：

** 在满足输入回报下，最小化风险；
请手动更改设置模式。

** 在满足输入风险下，最大化收益。
J GID：
0AB023977FD09C6BE8196C351D41A098
模式3计算时间大概需要10分钟。
* optimization:
** DONE position limit
CLOSED: [2017-06-23 Fri 14:46]
add position limit will cause rank(A) < p
** DONE maximum return subject to target risk.
CLOSED: [2017-06-23 Fri 14:46]
** add more constraint
default None Value
** DONE find the reason of why optimal result can't be reached.
CLOSED: [2017-06-25 Sun 20:35]
** DONE find the function running time.
CLOSED: [2017-06-26 Mon 09:50]
CPU total: 26us.
Wall time: 548us.
** DONE factor exposure limit boundary.
CLOSED: [2017-06-26 Mon 11:47]
- create boundary dataframe, fill input dataframe na with 0 on lower bound, 1 on upper bound.
default value from min and max of each factor.
** DONE integrate finished functions to GS .
CLOSED: [2017-06-27 Tue 09:59]
** DONE sharpe portfolio.
CLOSED: [2017-06-27 Tue 09:58]
** DONE calculate theoretical minimum and maximum theoretical returns from asset constraint.
CLOSED: [2017-06-27 Tue 15:18]
** DONE calculate theoretical min and max theoretical returns from group constraint.
CLOSED: [2017-06-28 Wed 14:32]
** DONE compare portfolio between maximum sharpe ratio portfolio and Mean-Variance portfolio.
CLOSED: [2017-06-29 Thu 14:12]
maximum sharpe ratio portfolio is compatible with weight and exposure constraint.
** DONE change modifying default constraint value.
CLOSED: [2017-07-03 Mon 09:41]
** DONE what if input asset, group, exposure constraint symbols are not in the risk model?
CLOSED: [2017-06-29 Thu 14:51]
** TODO use annualized return.
** TODO change Quadratic Programming(QP) problem for sharpe ratio portfolio to quadratically constrained quadratic program (QCQP).
QP is a subclass of QCQP, so as one would imagine, it is more difficult to solve QCQP, but luckily CVXOPT is up to the task after we convert the QCQP into an even more general class of optimization problems - second-order cone programs (SOCP).
*** QCQPs to SOCPs
CVXOPT does not have an explicit solver for QCQPs, rather we must convert the QCQP to a SOCP, or one could also convert it to a semidefinite program (SDP), which is more general than a SOCP.
#+BEGIN_SRC latex
minimize:
Σx
subject to:
x^TΣx≤\sigma_max
1^Tx=1
x≥0
#+END_SRC


** TODO select groups bug.
** TODO group constraint return limit.
** add loss function objective.
#+BEGIN_SRC latex
LossFunction = -ret + \lambda * \sigma + \beta * TransactionCost
#+END_SRC
** add transaction cost.
multi-period optimization.
try to minimize the transaction weight.
** change random selected symbols to ranked symbols.
** test the constraints.
** Use Constraint Attribution to understand the costs of your constraints.
provides a dashboard view of the impact of individual constraints, objectives or groups of constraints
on the objective function value (usually portfolio return) in your strategy. This tells you which elements of your strategy have an overall impact and which do not. It also provides a relative measure of the potential for improving the objective by relaxing different constraints.
**  Objective frontiers
can be used to create a classical mean variance frontier or to explore trade-offs, such as return vs. transaction costs or risk vs. tax liability
